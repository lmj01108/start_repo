# 논리회로 수업 정리용 파일 업로드

/*
# HDL - c언어가 기본
모듈 : 어떤 기능을 가지는 하나의 로직, "module"~"endmodule"안에 있어야함
모든 문장은 ; 으로 끝내고 "end~"로 시작하는 예약어에는 세미콜론 사용 안함

module 모듈이름 (포트목록);
    포트선언;
    레지스터 선언;
    와이어 선언;
    파라미터 선언;

    회로기능 표현;
        원시적인 연산자 또는
        assign문(조합회로표현)
        function문(조합회로표현)
        always문(순차회로표현)
        하위 모듈 호출 등.
endmodule (세미콜론 없음)

출처: https://ssmsig.tistory.com/53 [온라인 개인맞춤형 SIGMA!!]


input: 입력값을 받는 변수, input의 데이터 타입은 무조건 wire. reg가 될 수 없음
output: 출력값을 내는 변수
inout: 입출력.

wire: 실제로 회로를 물리적으로 연결하는 타입
reg: 데이터 저장 가능한 타입

*/

/*
EDA playground - testbench & design
full-adder - two half-adders & one or 

design code
module half_adder(x,y,s,c);
  input x,y;
  output c,s;
  
  //s= x XOR y
  xor xor1(s,x,y);
  //c= x AND y
  and and1(c,x,y);
  
endmodule

module full_adder(x,y,z,c,s);
  input x,y,z;
  output c,s;
  wire c1, s1, c2;
  
  // ha1, ha2, or1
  half_adder hal1(x, y, s1, c1);
  half_adder hal2(s1, z , s, c2);
  or or1(c, c2, c1);
endmodule


testbench code
module full_adder_tb;
  reg x,y,z;
  wire c,s;
  
  full_adder fa1(x,y,z,c,s);
  
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(1);
    
    
    x=0;y=0;z=0;
    #10 x=0;y=1;z=0;
    #10 x=1;y=0;z=0;
    #10 x=1;y=1;z=0;
    #10 x=0;y=0;z=1;
    #10 x=0;y=1;z=1;
    #10 x=1;y=0;z=1;
    #10 x=1;y=1;z=1;
    
    end  
  initial #200 $finish;
endmodule

*/
